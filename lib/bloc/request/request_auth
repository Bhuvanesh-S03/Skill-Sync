// lib/bloc/request/request_event.dart
import 'package:equatable/equatable.dart';
import 'package:skillsync/models/request_model.dart';

abstract class RequestEvent extends Equatable {
  const RequestEvent();

  @override
  List<Object?> get props => [];
}

class RequestLoadRequested extends RequestEvent {}

class RequestSendRequested extends RequestEvent {
  final String targetUserId;
  final String targetUserName;
  final String targetSkillId;
  final String targetSkillName;
  final String requesterSkillId;
  final String requesterSkillName;
  final String? message;

  const RequestSendRequested({
    required this.targetUserId,
    required this.targetUserName,
    required this.targetSkillId,
    required this.targetSkillName,
    required this.requesterSkillId,
    required this.requesterSkillName,
    this.message,
  });

  @override
  List<Object?> get props => [
    targetUserId,
    targetUserName,
    targetSkillId,
    targetSkillName,
    requesterSkillId,
    requesterSkillName,
    message,
  ];
}

class RequestAcceptRequested extends RequestEvent {
  final String requestId;

  const RequestAcceptRequested(this.requestId);

  @override
  List<Object> get props => [requestId];
}

class RequestRejectRequested extends RequestEvent {
  final String requestId;

  const RequestRejectRequested(this.requestId);

  @override
  List<Object> get props => [requestId];
}

class IncomingRequestsUpdated extends RequestEvent {
  final List<SkillSwapRequest> requests;

  const IncomingRequestsUpdated(this.requests);

  @override
  List<Object> get props => [requests];
}

class OutgoingRequestsUpdated extends RequestEvent {
  final List<SkillSwapRequest> requests;

  const OutgoingRequestsUpdated(this.requests);

  @override
  List<Object> get props => [requests];
}


// lib/bloc/request/request_bloc.dart
import 'dart:async';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:skillsync/repositories/request_repository.dart';

class RequestBloc extends Bloc<RequestEvent, RequestState> {
  final RequestRepository _requestRepository;
  StreamSubscription? _incomingRequestsSubscription;
  StreamSubscription? _outgoingRequestsSubscription;

  RequestBloc({required RequestRepository requestRepository})
      : _requestRepository = requestRepository,
        super(const RequestState()) {
    on<RequestLoadRequested>(_onRequestLoadRequested);
    on<RequestSendRequested>(_onRequestSendRequested);
    on<RequestAcceptRequested>(_onRequestAcceptRequested);
    on<RequestRejectRequested>(_onRequestRejectRequested);
    on<IncomingRequestsUpdated>(_onIncomingRequestsUpdated);
    on<OutgoingRequestsUpdated>(_onOutgoingRequestsUpdated);
  }

  void _onRequestLoadRequested(
    RequestLoadRequested event,
    Emitter<RequestState> emit,
  ) {
    emit(state.copyWith(status: RequestStatus.loading, clearError: true));
    
    _incomingRequestsSubscription?.cancel();
    _outgoingRequestsSubscription?.cancel();

    _incomingRequestsSubscription = _requestRepository
        .getIncomingRequests()
        .listen(
          (requests) => add(IncomingRequestsUpdated(requests)),
          onError: (error) => emit(
            state.copyWith(
              status: RequestStatus.error,
              errorMessage: error.toString(),
            ),
          ),
        );

    _outgoingRequestsSubscription = _requestRepository
        .getOutgoingRequests()
        .listen(
          (requests) => add(OutgoingRequestsUpdated(requests)),
          onError: (error) => emit(
            state.copyWith(
              status: RequestStatus.error,
              errorMessage: error.toString(),
            ),
          ),
        );
  }

  void _onIncomingRequestsUpdated(
    IncomingRequestsUpdated event,
    Emitter<RequestState> emit,
  ) {
    emit(
      state.copyWith(
        status: RequestStatus.loaded,
        incomingRequests: event.requests,
        clearError: true,
      ),
    );
  }

  void _onOutgoingRequestsUpdated(
    OutgoingRequestsUpdated event,
    Emitter<RequestState> emit,
  ) {
    emit(
      state.copyWith(
        status: RequestStatus.loaded,
        outgoingRequests: event.requests,
        clearError: true,
      ),
    );
  }

  void _onRequestSendRequested(
    RequestSendRequested event,
    Emitter<RequestState> emit,
  ) async {
    try {
      emit(state.copyWith(status: RequestStatus.loading, clearError: true));
      
      await _requestRepository.sendSkillSwapRequest(
        targetUserId: event.targetUserId,
        targetUserName: event.targetUserName,
        targetSkillId: event.targetSkillId,
        targetSkillName: event.targetSkillName,
        requesterSkillId: event.requesterSkillId,
        requesterSkillName: event.requesterSkillName,
        message: event.message,
      );

      emit(state.copyWith(status: RequestStatus.loaded, clearError: true));
    } catch (e) {
      emit(
        state.copyWith(
          status: RequestStatus.error,
          errorMessage: e.toString(),
        ),
      );
    }
  }

  void _onRequestAcceptRequested(
    RequestAcceptRequested event,
    Emitter<RequestState> emit,
  ) async {
    try {
      emit(state.copyWith(status: RequestStatus.loading, clearError: true));
      await _requestRepository.acceptRequest(event.requestId);
      emit(state.copyWith(status: RequestStatus.loaded, clearError: true));
    } catch (e) {
      emit(
        state.copyWith(
          status: RequestStatus.error,
          errorMessage: e.toString(),
        ),
      );
    }
  }

  void _onRequestRejectRequested(
    RequestRejectRequested event,
    Emitter<RequestState> emit,
  ) async {
    try {
      emit(state.copyWith(status: RequestStatus.loading, clearError: true));
      await _requestRepository.rejectRequest(event.requestId);
      emit(state.copyWith(status: RequestStatus.loaded, clearError: true));
    } catch (e) {
      emit(
        state.copyWith(
          status: RequestStatus.error,
          errorMessage: e.toString(),
        ),
      );
    }
  }

  @override
  Future<void> close() {
    _incomingRequestsSubscription?.cancel();
    _outgoingRequestsSubscription?.cancel();
    return super.close();
  }
}